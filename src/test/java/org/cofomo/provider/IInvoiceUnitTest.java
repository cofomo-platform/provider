package org.cofomo.provider;

import static org.mockito.Mockito.when;
import static org.springframework.restdocs.mockmvc.MockMvcRestDocumentation.document;
import static org.springframework.restdocs.mockmvc.MockMvcRestDocumentation.documentationConfiguration;
import static org.springframework.restdocs.operation.preprocess.Preprocessors.preprocessRequest;
import static org.springframework.restdocs.operation.preprocess.Preprocessors.preprocessResponse;
import static org.springframework.restdocs.operation.preprocess.Preprocessors.prettyPrint;
import static org.springframework.restdocs.payload.PayloadDocumentation.fieldWithPath;
import static org.springframework.restdocs.payload.PayloadDocumentation.responseFields;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import java.util.ArrayList;
import java.util.List;

import org.cofomo.commons.domain.transaction.Invoice;
import org.cofomo.provider.controller.InvoiceController;
import org.cofomo.provider.facade.InvoiceFacade;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.restdocs.AutoConfigureRestDocs;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.restdocs.RestDocumentationContextProvider;
import org.springframework.restdocs.RestDocumentationExtension;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.web.context.WebApplicationContext;

@ExtendWith({ RestDocumentationExtension.class, SpringExtension.class })
@WebMvcTest(InvoiceController.class)
@AutoConfigureRestDocs(outputDir = "target/generated-snippets")
public class IInvoiceUnitTest {

	@Autowired
	private MockMvc mockMvc;

//	@Autowired
//	private ObjectMapper objectMapper;

	@MockBean
	private InvoiceFacade facade;
	
	@BeforeEach
	public void setUp(WebApplicationContext webApplicationContext, RestDocumentationContextProvider restDocumentation) {

		this.mockMvc = MockMvcBuilders.webAppContextSetup(webApplicationContext)
				.apply(documentationConfiguration(restDocumentation).uris().withScheme("https")
						.withHost("provider.cofomo.org").withPort(443))
				.alwaysDo(
						document("{method-name}", preprocessRequest(prettyPrint()), preprocessResponse(prettyPrint())))
				.build();
	}

	@Test
	public void shouldReturnAllInvoices() throws Exception {

		// create list of bookings
		List<Invoice> invoiceList = new ArrayList<Invoice>();
		invoiceList.add(createInvoice1());
		invoiceList.add(createInvoice2());

		// define mock return value
		when(facade.getAll()).thenReturn(invoiceList);

		// action
		this.mockMvc.perform(get("/v1/invoice")).andDo(print()).andExpect(status().isOk())
				.andDo(document("invoice-get-all", preprocessRequest(prettyPrint()), preprocessResponse(prettyPrint())));
	}
	
	@Test
	public void shouldReturnAllInvoicesByStatusPayed() throws Exception {

		// create list of bookings
		List<Invoice> invoiceList = new ArrayList<Invoice>();
		invoiceList.add(createInvoice2());

		// define mock return value
		when(facade.getByStatus("payed")).thenReturn(invoiceList);

		// action
		this.mockMvc.perform(get("/v1/invoice/status/payed")).andDo(print()).andExpect(status().isOk())
				.andDo(document("invoice-get-all-by-status", preprocessRequest(prettyPrint()), preprocessResponse(prettyPrint())));
	}

	@Test
	public void shouldReturnOneInvoice() throws Exception {

		// create mobility provider
		Invoice invoice = createInvoice1();

		// define mock return value
		when(facade.getById("1")).thenReturn(invoice);
		// action
		this.mockMvc.perform(get("/v1/invoice/1").accept(MediaType.APPLICATION_JSON)).andExpect(status().isOk())
				.andDo(document("invoice-get-by-id", preprocessRequest(prettyPrint()), preprocessResponse(prettyPrint()),
						responseFields(fieldWithPath("id").description("Autogenerated UUID of the booking"),
								fieldWithPath("paymentProviderId").description("Booking start time"),
								fieldWithPath("clientId").description("Booking end time"),
								fieldWithPath("status").description("Mobility option to book"),
								fieldWithPath("lastUpdate").description("Autogenerated UUID of the provider"),
								fieldWithPath("value").description("Name of the provider"),
								fieldWithPath("currency").description("URI-endpoint of provider"))))
				.andDo(print());
	}

	// helper functions
	private static Invoice createInvoice1() {
		return new Invoice("pending", 14.2, "ethereum");
	}
	
	private static Invoice createInvoice2() {
		return new Invoice("payed", 5.3, "dollar");
	}

}
